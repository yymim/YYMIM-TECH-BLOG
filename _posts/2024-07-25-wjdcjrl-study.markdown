---
layout: post
title:  "정보처리기사 - 암기 정리"
date:   2024-07-19 01:00:00 +0300
image:  
tags:   정보처리기사
---

## 응집도 (우 < 논 < 시 < 절 < 통 < 순 < 기)
* __응집도가 높을수록 좋은 소프트웨어__
* 기능적(function) : 모듈 내부의 모든 기능요소가 단일 문제와 연관되어 수행
* 순차적(sequential) : 모듈 내 출력 데이터를 다음 활동의 입력 데이터로 사용
* 통신적(communication) : 동일한 입/출력을 사용하여 서로 다른 기능을 수행
* 절차적(procedural) : 모듈 내 구성요소들이 다수 관련 기능을 __순차적__ 으로 수행
* 시간적(temporal) : 특정 시간 내 처리되는 기능을 모아 하나의 모듈로 작성
* 논리적(logical) : 유사한 성격의 처리 요소들로 하나의 모듈이 형성
* 우연적(coincidental) : 각 구성요소들이 서로 관련없는 요소로만 구성


## 결합도 (내 > 공 > 외 > 제 > 스 > 자)
* __결합도가 낮을수록 좋은 소프트웨어__
* 내용(content) : 한 모듈이 다른 모듈의 내부 기능 및 자료를 직접 참조/수정
* 공통/공유(common) : 공유되는 공통 데이터를 여러 모듈이 사용. 전역 변수 참조
* 외부(external) : 한 모듈에서 선언한 데이터를 외부의 다른 모듈에서 참조
* 제어(control) : 한 모듈이 다른 모듈의 상세한 처리 절차를 알고있어 이를 통제하는 경우나 처리기능이 두 모듈에 분리되어 설계
* 스탬프(stamp) : 두 모듈이 동일한 자료구조를 조회
* 자료(data) : 모듈간의 인터페이스가 자료 요소로만 구성

---------------------------------------------------------------------------------------------------------------------------------------------------

# 디자인 패턴

## 생성패턴 (앱빌팩프싱)
* Abstract Factory : 구체적인 클래스에 의존하지 않고, 서로 연관되거나 의존적인 객체들이 조합된 인터페이스 제공
* Builder : 객체 생성 단계를 __캡슐화/분리__ 하여 객체를 조립하여 생성. __동일한 객체 생성 절차__ 에서 __서로 다른 표현 결과__ 를 제공
* Factory Method : 상위클래스에서 객체 생성 인터페이스를 정의하지만, 인스턴스를 만드는 클래스는 __서브클래스에서 결정__ 하도록 분리
* Prototype : __원본/원형 객체를 복제__ 하는 방식으로 객체를 생성
* Singleton : 클래스에서 __하나의 객체__ 만 생성 가능하ㅕ, 해당 객체를 어디서든 참조할 수 있지만 여러 프로세스가 동시에 참조는 불가

## 구조패턴 (어데컴브파플프)
* Adaptor : 비호환 인터페이스에 호환성 부여하도록 변환
* Decorator : 상속 사용없이 객체 간 결합을 통해 객체 기능을 동적으로 추가/확장
* Composite : 트리 구조로 부분/전체 계층 표현, 복합/단일 객체를 구분없이 사용
* Bridge : __구현부에서 추상층을 분리__ 후 각자 독립적으로 변형/확장 가능
* Facade : 상위에서 인터페이스를 구성하여 서브클래스의 기능을 복잡하게 표현하지 않고 단순한 인터페이스로 구현
* Flyweight : 인스턴스를 공유하여 메모리 절약. __클래스 경량화__
* Proxy : 접근이 힘든 객체를 연결하는 인터페이스 역할. __대리 객체 수행__. __대리자__

## 행위패턴
* Chain of Responsibility : 처리가능한 객체가 둘 이상 존재하여 한 객체 내 처리 불가 시 다음 객체로 이관
* Command : 요청 명령어들을 추상/구체 클래스로 분리 후 단순화/캡슐화
* Interpreter : 언어에 문법 표현 정의
* Iterator : 접근이 빈번한 객체에 대해 동일 인터페이스 사용
* Mediator : 객체들간 __복잡한 상호작용을 캡슐화__ 하여 객체로 정의 후 중재
* Memento : 객체를 이전의 특정 시점의 상태로 저장하고 복원 (캡슐화 유지)
* Observer : 한 객체 상태 변화 시 __상속되어 있는 객체들에 변화 전달__
* State : 객체의 상태에 따라 동일한 동작을 다르게 처리
* Strategy : __동일 계열 알고리즘을 개별적으로 캡슐화__ 하여 상호 교환
* Template Method : 여러 클래스에서 공통 사용 메서드를 상위 클래스에서 정의하고, 하위 클래스마다 다르게 구현해야하는 세부 사항을 개별 구현
* Visitor : 각 클래스 데이터 구조로부터 처리/연산 기능을 분리하여 별도의 클래스를 만들고, 해당 클래스 메서드가 각 클래스를 돌아다니며 특정 작업을 수행.

---------------------------------------------------------------------------------------------------------------------------------------------------

# 테스트 종류
## 화이트박스 테스트 종류
* 기초 경로 검사
* 제어 구조 검사

## 블랙박스 테스트 종류
* 동치 분할 검사
* 경계값 분석
* 원인-효과 그래프 검사
* 오류 예측 검사
* 비교 검사

---------------------------------------------------------------------------------------------------------------------------------------------------

## 개발단계에 따른 애플리케이션 테스트
* 단위 테스트 : __최소 단위__(__모듈/컴포넌트__) 기반 테스트.주로 구조 기반 테스트 진행. 기능성 테스트 최우선
* 통합 테스트 : __인터페이스__ 간 시스템이 정상 실행되는지 확인
* 시스템 테스트 : 개발된 SW의 컴퓨터 시스템 내 작용여부 점검. 실제 사용 환경과 유사한 테스트 환경. 기능적 및 비기능적 테스트 구분
* 인수 테스트 : 사용자의 요구사항 충족 여부 확인
    - 알파 테스트 : 개발자와 함께
    - 베타 테스트 : 개발자 없이

## 키
* 후보키 : 유일성, 최소성 만족
* 슈퍼키 : 유일성은 만족하지만, __최소성__ 은 만족 불가

## 접근 통제 기술
* 임의 접근 통제(DAC) : 사용자의 신원/신분에 따라 접근 권한 부여. 데이터 소유자가 접근 통제 권한 지정/제어
* 강제 접근 통제(MAC) : 주체와 객체의 등급을 비교 후 시스템이 접근 권한 부여
* 역할 기반 접근 통제(RBAC) : 사용자의 역할에 따라 접근 권한 부여(중앙관리자가 지정)

## 반정규화
* 시스템 성능 향상 및 운영 편의성을 위해 의도적으로 데이터 중복/통합/분리를 허용하여 정규화 원칙을 위반

---------------------------------------------------------------------------------------------------------------------------------------------------

# 교착상태
* 둘 이상의 프로세스들이 서로 점유하고 있는 자원을 요구하며 무한정 대기하고 있는 상태

## 교착 상태 필요 충분 조건
* 상호 배제 : 한번에 한개의 프로세스만이 공유 자원을 사용
* 점유 및 대기 : 최소한 하나의 자원을 점유하면서 다른 프로세스에 할당된 자원을 추가로 점유하기 위해 대기하는 프로세스 존재
* 비선점 : 다른 프로세스에 할당된 자원은 끝날때까지 강제로 선점 불가
* 환형 대기 : 프로세스들이 원형으로 구성되어 있어 앞뒤 프로세스 자원을 요구

## 교착 상태 해결 방법
* 예방
* 회피 : 은행원 알고리즘
* 발견
* 회복

---------------------------------------------------------------------------------------------------------------------------------------------------

## 페이징 기법의 문제
* 스래싱 : 프로세스 처리 시간보다 페이지 교체 시간이 더 많아지는 상태

## 페이징 기법의 해결방안
* 워킹 셋 : 일정 시간동안 자주 참조하는 페이지들을 주기억장치에 상주시켜 페이지 부재 및 교체 현상을 최소화

---------------------------------------------------------------------------------------------------------------------------------------------------

## 선점형 스케줄링
* SRT(Shortest Remaining Time First) : 가장 짧은 시간이 소요되는 프로세스를 먼저 수행
* 다단계 큐
* 다단계 피드백 큐 : 서로 다른 CPU 시간 할당량 부여
* 라운드 로빈

## 비선점형 스케줄링 (우기HFS)
* 우선순위
* 기한부
* HRN : 대기중인 프로세스 중 현재 응답률이 가장 높은것을 선택. SJF의 약점인 __기아현상__ 보완. (대기시간 + 서비스시간) / 서비스시간
* FCFS(First Come First Service) : FIFO
* SJF(Shortest Job First)

---------------------------------------------------------------------------------------------------------------------------------------------------

# OSI 7계층 (물데네전세표응)

|계층이름       | 설명                                  |
|--------------|---------------------------------------|
|응용계층       |사용자와 네트워크 간 응용서비스 연결, 데이터 생성|
|표현계층       |데이터 형식 설정, 부호교환, 암·복호화, 압축|
|세션계층       |송수신간의 논리적인 연결, 연결 접속, 동기제어|
|전송계층       |송수신 프로세스 간의 연결, 데이터 분할, 재조립, 흐름 제어, 오류 제어, 혼잡 제어|
|네트워크 계층  |단말기 간 데이터 전송을 위한 최적화된 경로 제공|
|데이터링크 계층|인접 시스템 간 데이터 전송, 전송 오류 제어, 동기화, 오류 제어, 흐름 제어, 회선 제어|
|물리계층       |0과 1의 비트 정보를 회선에 보내기 위한 전기적 신호로 변환|

---------------------------------------------------------------------------------------------------------------------------------------------------

# 프로토콜
* 서로 다른 시스템이나 기기들 간의 데이터 교환을 원활히 하기 위한 표준화된 통신규약
* '기술적 은어'를 뜻함
 
## 프로토콜의 3요소
* 구문
* 의미
* 타이밍

---------------------------------------------------------------------------------------------------------------------------------------------------

## 정렬
* 선택정렬 
    : __최소값__ 을 찾아 첫번째 숫자와 위치 교환, 이후 정렬된 값을 제외한 최소 숫자를 정렬되지 않은 숫자 중 첫번재 숫자와 다시 위치 교환, 이를 반복
    1. 9 6 7 3 5
    2. 3 6 7 9 5
    3. 3 5 7 9 6
    4. 3 5 6 9 7
    5. 3 5 6 7 9

<br>

* 삽입정렬
    : __두번째 숫자__ 와 첫번째 숫자 비교하여 크기 순으로 정렬, 이후 __3번째 숫자__ 를 앞서 정렬된 숫자들 사이에 크기 순에 맞게 재정렬, 이를 반복
    1. 9 6 7 3 5
    2. 6 9 7 3 5
    3. 6 7 9 3 5
    4. 3 6 7 9 5
    5. 3 5 6 7 9
    
<br>
    
* 버블정렬
    : 왼쪽부터 __인접한 두 숫자__ 간 크기 비교하여 위치 교환, 
    1. 9 6 7 3 5
        1. 6 9 7 3 5
        2. 6 7 9 3 5
        3. 6 7 3 9 5
        4. 6 7 3 5 9
    2. 6 3 7 5 9
        1. 6 3 5 7 9
    3. 3 6 5 7 9
        1. 3 5 6 7 9

---------------------------------------------------------------------------------------------------------------------------------------------------

## 추가
* AJAX
* 가상회선 vs 데이터그램
* L2TP vs PPTP vs L2F
* SSH "포트번호 22번"
* 바이러스 : 다른 네트워크의 컴퓨터로 스스로 전파되지는 않음
* 웜 : 자신을 복제하여 네트워크 연결을 통해서 다른 컴퓨터로 스스로 전파되고 확산
* ICMP : IP의 동작 과정에서 전송 오류가 발생하는 경우에 오류 정보를 전송하는 목적으로 사용하는 프로토콜
* 카디널리티
* 릴레이션 인스턴스 -> 릴레이션 외연

