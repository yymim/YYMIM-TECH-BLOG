---
layout: post
title:  "정보처리기사 - 암기 정리"
date:   2024-07-25 06:00:00 +0300
image:  
tags:   정보처리기사
---

---------------------------------------------------------------------------------------------------------------------------------------------------

[참고▶](https://powerdev.tistory.com/78?category=1212254)

---------------------------------------------------------------------------------------------------------------------------------------------------

## 비용 산정 모형 종류
* LoC(Line of Code) 모형 : 원시 코드 라인 수의 __낙관치, 중간치, 비관치__ 를 측정해 예측치를 구해 비용을 산정하는 방식
*  Man Month 모형 : 한 사람이 1개월 동안 할 수 있는 일의 양을 기준으로 프로젝트 비용 산정하는 방식
* COCOMO 모형 : 보헴이 제한, 프로그램 규모에 따른 비용 산정
    - 조직형(Organic Mode) : 5만 라인 이하
    - 반 분리형(Semi-Detached Mode) : 30만 라인 이하
    - 임베디드형(Embedded Mode) : 30만 라인 이상
* 푸트남 모형 : 개발주기의 단계별로 요구할 인력의 분포를 가정하는 방식, 생명주기 예측 모형, Rayleigh-Norden 곡선
* 기능점수(FP; Fuction Point) 모형 : 요구 기능에 따른 가중치 부여

## 일정관리 모델 : 일정 기한 내에 적절하게 완료될 수 있도록 관리
* 주 공정법(CPM) : 여러 작업의 수행 순서가 얽혀 있는 프로젝트의 일정 계산
    * 주 공정(Critical Path) : 프로젝트의 시작에서 종료까지 가장 긴 시간이 걸리는 경로
* PERT : 일의 순서를 계획적으로 정리하기 위한 수렴 기법, __비관치, 중간치, 낙관치__ 를 이용
* 주 공정 연쇄법(CCPM) : 자원제약사항을 고려해 일정 작성


---------------------------------------------------------------------------------------------------------------------------------------------------

# UML 다이어그램

## 구조적(Structural) 다이어그램 / 정적(Static) 다이어그램
* 클래스 : 클래스의 속성 및 연산과 클래스 간 정적 관계를 표현한 다이어그램
* 객체 : 클래스에 속한 사물, 인스턴스
* 컴포넌트 : 컴포넌트와 그들 사이의 의존 관계
* 배치(Deployment) : 컴포넌트 사이의 종속성, 물리적 요소들의 위치
* 복합체 구조(Composite Structure) : 클래스나 컴포넌트가 복합 구조를 갖는 경우 그 내부 구조를 표현하는 다이어그램
* 패키지 : 유스케이스나 클래스 등의 모델 요소들을 그룹화한 패키지들의 관계, 서로 다른패키지들 사이의 의존 관계 표현

## 행위적(Behavioral) 다이어그램/ 동적(Dynamic) 다이어그램
* 유스케이스 : 시스템이 제공하고 있는 기능 관련된 외부 요소를 사용자의 관점에서 표현
* 시퀀스(Sequence) : 객체 간 상호작용을 시간적 개념을 중심으로 메시지 흐름으로 표현
* 커뮤니케이션 : 동작에 참여하는 객체들이 주고받는 메시지, 객체 간의 연관
* 상태(State) : 상호작용에 따라 상태가 어떻게 변화하는지
* 활동(Activity) : 어떤 기능을 수행하는지, 객체의 처리 로직, 조건에 따른 처리의 흐름
* 타이밍 : 객체 상태 변화와 시간 제약을 명시적으로 표현

---------------------------------------------------------------------------------------------------------------------------------------------------

## 키
* 후보키 : 유일성, 최소성 만족
* 슈퍼키 : 유일성은 만족하지만, __최소성__ 은 만족 불가


## 인터페이스 기능 구현
* JSON : "속성-값 쌍" 또는 "키-값 쌍" 으로 이루어진 데이터 오브젝트를 전달하기 위해 인간이 읽을 수 있는 텍스트를 사용하는 개방형 표준 포맷, AJAX에서 많이 사용되고 XML을 대체하는 주요 데이터 포맷
* XML : HTML의 단점을 보완한 인터넷 언어, SGML의 복잡한 단점을 개선한 특수한 목적을 갖는 마크업 언어
* AJAX : __자바스크립트__ 를 사용하여 웹 서버와 클라이언트 간 __비동기적__ 으로 __XML 데이터를 교환__ 하고 조작하기 위한 웹 기술, XMLHttpRequest 객체를 이용해 전체 페이지를 새로 로드하지 않고 필요한 부분만 로드한다.
* REST : 웹과 같은 분산 하이퍼미디어 환경에서 자원의 존재/상태 정보를 표준화된 HTTP 메서드로 주고받는 웹 아키텍처(리소스, 메서드, 메시지)

## 인터페이스 구현 검증 도구
* xUnit : 자바, C++, .Net 등 다양한 언어를 지원하는 단위테스트 프레임워크
* STAF : 서비스 호출, 컴포넌트 재사용 등 다양한 환경 지원하는 테스트 프레임 워크
* FitNess : 웹 기반 테스트 케이스 설계/실행/결과 확인 등을 지원
* NTAF : FitNess + STAF
* Selenium : 다양한 브라우저 지원 및 개발언어를 지원, 테스트 스크립트 언어 학습할 필요 없음, 웹 애플리케이션 테스트 프레임워크
* watir : 루비 기반 웹 애플리케이션 테스트 프레임워크

## 인터페이스 감시 도구(APM; 성능 모니터링 도구)
* 스카우터(SCOUTER) : 애플리케이션에 대한 모니터링 및 DB Agent를 통해 오픈 소스 DB모니터링 기능, 인터페이스 감시 기능 제공
* 제니퍼(Jennifer) : 애플리케이션 개발부터 테스트, 오픈, 운영, 안정화까지 전 생애주기 단계 동안 성능을 모니터링하고 분석해주는 APM 소프트웨어

---------------------------------------------------------------------------------------------------------------------------------------------------

## 응집도 (우 < 논 < 시 < 절 < 통 < 순 < 기)
* 모듈의 독립성을 나타내는 정도, 모듈 내부 구성요소 간 연관 정도
* __응집도가 높을수록 좋은 소프트웨어__
* 우연적(coincidental) : 각 구성요소들이 서로 관련없는 요소로만 구성
* 논리적(logical) : 유사한 성격의 처리 요소들로 하나의 모듈이 형성
* 시간적(temporal) : 특정 시간 내 처리되는 기능을 모아 하나의 모듈로 작성
* 절차적(procedural) : 모듈 내 구성요소들이 다수 관련 기능을 __순차적__ 으로 수행
* 통신적(communication) : 동일한 입/출력을 사용하여 서로 다른 기능을 수행
* 순차적(sequential) : 모듈 내 출력 데이터를 다음 활동의 입력 데이터로 사용
* 기능적(function) : 모듈 내부의 모든 기능요소가 단일 문제와 연관되어 수행


## 결합도 (내 > 공 > 외 > 제 > 스 > 자)
* 모듈 내부가 아닌 외부의 모듈과의 연관도, 모듈 간의 상호의존성, 모듈 간의 관련성
* __결합도가 낮을수록 좋은 소프트웨어__
* 내용(content) : 한 모듈이 다른 모듈의 내부 기능 및 자료를 직접 참조/수정
* 공통/공유(common) : 공유되는 공통 데이터를 여러 모듈이 사용. 전역 변수 참조
* 외부(external) : 한 모듈에서 선언한 데이터를 외부의 다른 모듈에서 참조
* 제어(control) : 한 모듈이 다른 모듈의 상세한 처리 절차를 알고있어 이를 통제하는 경우나 처리기능이 두 모듈에 분리되어 설계
* 스탬프(stamp) : 두 모듈이 동일한 자료구조를 조회
* 자료(data) : 모듈간의 인터페이스가 자료 요소로만 구성

---------------------------------------------------------------------------------------------------------------------------------------------------

# 디자인 패턴

## 생성패턴 (앱빌팩프싱)
* Abstract Factory : 구체적인 클래스에 의존하지 않고, 서로 연관되거나 의존적인 객체들이 조합된 인터페이스 제공
* Builder : 객체 생성 단계를 __캡슐화/분리__ 하여 객체를 조립하여 생성. __동일한 객체 생성 절차__ 에서 __서로 다른 표현 결과__ 를 제공
* Factory Method : 상위클래스에서 객체 생성 인터페이스를 정의하지만, 인스턴스를 만드는 클래스는 __서브클래스에서 결정__ 하도록 분리
* Prototype : __원본/원형 객체를 복제__ 하는 방식으로 객체를 생성
* Singleton : 클래스에서 __하나의 객체__ 만 생성 가능하며, 해당 객체를 어디서든 참조할 수 있지만 여러 프로세스가 동시에 참조는 불가

## 구조패턴 (어데컴브파플프)
* Adaptor : 비호환 인터페이스에 호환성 부여하도록 변환
* Decorator : 상속 사용없이 객체 간 결합을 통해 객체 기능을 동적으로 추가/확장
* Composite : 트리 구조로 부분/전체 계층 표현, 복합/단일 객체를 구분없이 사용
* Bridge : __구현부에서 추상층을 분리__ 후 각자 독립적으로 변형/확장 가능
* Facade : 상위에서 인터페이스를 구성하여 서브클래스의 기능을 복잡하게 표현하지 않고 단순한 인터페이스로 구현
* Flyweight : 인스턴스를 공유하여 메모리 절약. __클래스 경량화__
* Proxy : 접근이 힘든 객체를 연결하는 인터페이스 역할. __대리 객체 수행__. __대리자__

## 행위패턴
* Chain of Responsibility : 처리가능한 객체가 둘 이상 존재하여 한 객체 내 처리 불가 시 다음 객체로 이관
* Command : 요청 명령어들을 추상/구체 클래스로 분리 후 단순화/캡슐화
* Interpreter : 언어에 문법 표현 정의
* Iterator : 접근이 빈번한 객체에 대해 동일 인터페이스 사용
* Mediator : 객체들간 __복잡한 상호작용을 캡슐화__ 하여 객체로 정의 후 중재
* Memento : 객체를 이전의 특정 시점의 상태로 저장하고 복원 (캡슐화 유지)
* Observer : 한 객체 상태 변화 시 __상속되어 있는 객체들에 변화 전달__
* State : 객체의 상태에 따라 동일한 동작을 다르게 처리
* Strategy : __동일 계열 알고리즘을 개별적으로 캡슐화__ 하여 상호 교환
* Template Method : 여러 클래스에서 공통 사용 메서드를 상위 클래스에서 정의하고, 하위 클래스마다 다르게 구현해야하는 세부 사항을 개별 구현
* Visitor : 각 클래스 데이터 구조로부터 처리/연산 기능을 분리하여 별도의 클래스를 만들고, 해당 클래스 메서드가 각 클래스를 돌아다니며 특정 작업을 수행.

---------------------------------------------------------------------------------------------------------------------------------------------------
## 화이트박스 테스트 유형
* 구문(Statement) 커버리지 : 프로그램 내의 모든 명령문을 적어도 한 번 수행하는 커버리지
* 결정(선택, 분기)(Decision) 커버리지 : 결정 포인트 내의 전체 조건식이 적어도 한번은 참과 거짓의 결과가 되도록 수행
* 조건(Condition) 커버리지 : 결정 포인트 내의 각 개별 조건식이 적어도 한번은 참과 거짓의 결과가 되도록 수행
* 조건/결정 커버리지 : 전체 조건식 + 개별 조건식
* 변경 조건/결정 커버리지 : 개별 조건식이 다른 개별 조건식에 영향을 받지 않고 전체 조건식에 독립적으로 영향을 주도록 함
* 다중 조건(Multiple Condition) 커버리지 : 결정 조건 내 모든 개별 조건식의 모든 가능한 조합을 100% 보장하는 커버리지
* 기본 경로(Base Path) 커버리지 : 수행 가능한 모든 경로를 테스트, 멕케이브 순환 복잡도
    - 맥케이브 복잡도 : 간선 수(화살표) – 노드 수(원) + 2
* 제어 흐름(Control Flow) 테스트 : 프로그램 제어 구조를 그래프 형태로 나타내어 내부 로직 테스트
* 데이터 흐름 테스트 : 제어 흐름 그래프에 사용현황 추가

## 화이트박스 테스트 종류
* 기초 경로 검사
* 제어 구조 검사

## 블랙박스 테스트 종류
* 동등 분할(Equivalence Partitioning) 테스트 : 입력 데이터의 영역을 유사한 도메인별로 유효값/무효값을 그룹핑하여 대푯값 테스트 케이스를 도출해 테스트
* 경곗값 분석(Boundary Value Analysis) 테스트 : 최솟값 바로 위, 최대치 바로 아래 등 입력값의 극한 한계를 테스트 하는 기법
* 결정 테이블(Decision Table) 테스트 : 요구사항의 논리와 발생조건을 테이블 형태로 나열해, 조건과 행위를 모두 조합해 테스트
* 상태 전이(State transition) 테스트 : 어느 한 상태에서 다른 상태로 전이 되는 경우의 수를 수행하는 테스트
* 유스케이스(Use Case) 테스트 : 프로세스 흐름을 기반으로 테스트 케이스를 명세화해 수행하는 테스트
* 분류 트리(Classification Tree Method) 테스트 : SW의 일부 또는 전체를 트리구조로 분석 및 표현하여 테스트 케이스 설계해 테스트
* 페어와이즈(Pairwise) 테스트 : 테스트 데이터 값들 간에 최소한 한 번씩을 조합하는 방식
* 원인-결과 그래프 테스트 : 그래프를 활용해 입력 데이터 간의 관계 및 출력에 미치는 영향을 분석
* 비교(Comparison) 테스트 : 여러 버전의 프로그램에 같은 입력값을 넣어 비교해 테스트

---------------------------------------------------------------------------------------------------------------------------------------------------

## 개발단계에 따른 애플리케이션 테스트
* 단위 테스트 : __최소 단위__(__모듈/컴포넌트__) 기반 테스트.주로 구조 기반 테스트 진행. 기능성 테스트 최우선
* 통합 테스트 : __인터페이스__ 간 시스템이 정상 실행되는지 확인
* 시스템 테스트 : 개발된 SW의 컴퓨터 시스템 내 작용여부 점검. 실제 사용 환경과 유사한 테스트 환경. 기능적 및 비기능적 테스트 구분
* 인수 테스트 : 사용자의 요구사항 충족 여부 확인
    - 알파 테스트 : 개발자와 함께
    - 베타 테스트 : 개발자 없이

## 테스트 오라클 종류
* 참 오라클 : 모든 입력값에 대해 기대하는 결과를 생성함으로써 발생된 오류를 모두 검출
* 샘플링 오라클 : 특정한 몇 개의 입력값에 대해서만 기대하는 결과를 제공
* 휴리스틱 오라클 : 샘플링 오라클을 개선, + 나머지 값들에 대해서는 휴리스틱(추정) 처리
* 일관성 검사 오라클 : 애플리케이션 변경이 있을 때, 수행 전과 후의 결괏값이 동일한지 확인

## 테스트 하네스(Test Harness)
* 애플리케이션 컴포넌트 및 모듈을 테스트하는 환경의 일부분으로, 테스트를 지원하기 위한 코드와 데이터를 말하며, 단위 또는 모듈 테스트에 사용하기 위해 코드 개발자가 작성한다.

## 테스트 하네스 구성요소
* 테스트 드라이버, 테스트 스텁
* 테스트 케이스 : 요구사항에 준수하는 지를 확인하기 위해 개발된 입력값, 실행조건, 예상된 결과의 집합
* 테스트 슈트 : 테스트 케이스의 집합
* 테스트 스크립트 : 자동화된 테스트 실행 절차에 대한 명세
* 목 오브젝트 : 사용자의 행위를 조건부로 사전 입력해 두면, 그 상황에 예정된 행위 수행

---------------------------------------------------------------------------------------------------------------------------------------------------

## 접근 통제 기술
* 임의 접근 통제(DAC) : 사용자의 신원/신분에 따라 접근 권한 부여. 데이터 소유자가 접근 통제 권한 지정/제어
* 강제 접근 통제(MAC) : 주체와 객체의 등급을 비교 후 시스템이 접근 권한 부여
* 역할 기반 접근 통제(RBAC) : 사용자의 역할에 따라 접근 권한 부여(중앙관리자가 지정)

## 반정규화
* 시스템 성능 향상 및 운영 편의성을 위해 의도적으로 데이터 중복/통합/분리를 허용하여 정규화 원칙을 위반

---------------------------------------------------------------------------------------------------------------------------------------------------

## 해시 암호화 알고리즘
* MD5 : MD4를 개선한 알고리즘 , 프로그램이나 파일의 무결성 검사에 사용
* SHA-1 : NSA에서 미 정부 표준으로 지정, DSA에서 사용, 해시 값 생성
* SHA-256/384/512 
* HAS-160 : 국내 표준 서명 알고리즘을 위해 개발된 해시 함수, MD5장점+SHA-1장점

## 소프트웨어 개발 보안
* IPSec(Internet Protocol Security) : IP계층에서 무결성과 인증을 보장하는 인증 헤더와 기밀성을 보장하는 암호화를 이용한 IP 보안 프로토콜, 암호화, 키 관리 프로토콜로 구성
* SSL/TLS : 전송계층과 응용계층 사이에서 클라이언트와 서버 간의 웹 데이터 암호화, 상호 인증 및 전송 시 데이터 무결성을 보장하는 보안 프로토콜
* S-HTTP(Secure Hypertext Transfer Protocol) : 웹상에서 네트워크 트래픽을 암호화하는 주요 방법, 클라이언트와 서버 간 전송되는 모든 메시지를 각각 암호화해 전송하는 기술

## 입력 데이터 검증 및 표현 취약점
* XSS(Cross Site Script) : 검증되지 않은 외부 입력 데이터가 포함된 웹페이지를 사용자가 열람할 때 부적절한 스크립트가 실행되는 공격
* 사이트 간 요청 위조(CSRF; Cross Site Request Forgery) : 사용자가 자신의 의지와는 무관하게 공격자가 의도한 행위를 특정 웹사이트에 요청하게 하는 공격
* SQL 삽입(Injection) : 악의적인 SQL 구문을 삽입하고 실행시켜 정보를 열람, 조작할 수 있는 취약점 공격법

## 네트워크 보안 솔루션
* 방화벽(Firewall) : 기업 내부, 외부 간 트래픽을 모니터링 하여 시스템의 접근을 허용하거나 차단하는 시스템
* 웹 방화벽 (WAF; Web Application Firewall)
* 네트워크 접근 제어(NAC; Network Access Control) : 단말기가 내부 네트워크에 접속을 시도할 때 이를 제어하고 통제하는 기능을 제공하는 솔루션
* 침입 탐지 시스템(IDS; Intrusion Detection System) : 네트워크에 발생하는 이벤트를 모니터링하고, 침입을 실시간으로 탐지하는 시스템
* 침입 방지 시스템(IPS; Intrusion Prevention System) : 네트워크에 대한 공격이나 침입을 실시간적으로 차단하는 시스템
* 무선 침입 방지 시스템(WIPS; Wireless Intrusion Prevention System) : 무선 단말기의 접속을 자동 탐지
* 통합 보안 시스템(UTM; Unified Threat Management) : 다양한 보안 장비의 기능을 하나로 통합한 장비
* 가상사설망(VPN; Virtual Private Network) : 인터넷과 같은 공중망에 인증, 암호화, 터널링 기술을 활용해 마치 전용망을 사용하는 효과를 가지는 보안 솔루션

---------------------------------------------------------------------------------------------------------------------------------------------------

## 비즈니스 연속성 계획 관련 주요 용어
* BIA(Business Impact Analysis) : 장애나 재해로 인한 운영상의 주요 손실을 볼 것을 가정하여 비즈니스 영향 분석
* RTO(Recovery Time Objective) : 업무중단 시점부터 업무가 복구되어 다시 가동될 때까지의 시간
* RPO(Recovery Point Objective) : 업무중단 시점부터 데이터가 복구되어 다시 정상 가동될 때 데이터의 손실 허용 시점
* DRP(Disaster Recovery Plan) : 재난으로 장기간에 걸쳐 시설의 운영이 불가능한 경우를 대비한 재난 복구 계획
* DRS(Disaster Recovery System) : 재해 복구 센터

## 보안 공격 관련 중요 용어
* 워터링 홀(Watering Hole) : 특정인이 잘 방문하는 웹 사이트에 악성코드를 심는 공격기법
* 토르 네트워크 : 네트워크 경로를 알 수 없도록 암호화 기법을 사용하여 데이터를 전송하며, 익명으로 인터넷을 사용할 수 있는 가상 네트워크
* 핑거 프린팅 : 멀티미디어 콘텐츠에 저작권 정보와 구매한 사용자 정보를 삽입해 콘텐츠 불법 배포자에 대한 위치 주적이 가능한 기술
* CWE : 미국 비영리 회사인 MITRE 사가 중심이 되어 소프트웨어에서 공통적으로 발생하는 약점을 체계적으로 분류한 목록
* 디렉토리 리스팅(Listing) 취약점 : 공격자가 서버 내의 모든 디렉토리 및 파일 목록을 볼 수 있는 취약점
* 부 채널 공격(Side Channel Attack) : 암호화 알고리즘의 물리적 특성을 측정 해 내부 비밀정보를 획득
* 드라이브 바이 다운로드(Drive By Download) : 해커가 불특정 웹 서버와 웹 페이지에 악성 스크립트를 설치하고, 불특정 사용자 접속 시 사용자 동의 없이 실행되어 의도된 서버로 연결하여 감염시킴

---------------------------------------------------------------------------------------------------------------------------------------------------

## 애플리케이션 성능 측정 지표
* 처리량(Throughput) : 주어진 시간에 처리할 수 있는 트랜잭션의 수
* 응답 시간(Response Time) : 사용자 입력이 끝난 후, APP의 응답 출력이 개시될 때까지의 시간
* 경과 시간(Turnaround Time) : 사용자가 요구를 입력한 시점부터 트랜잭션을 처리 후 그 결과의 출력이 완료할 때까지 걸리는 시간
* 자원 사용률(Resource Usage) : 애플리케이션이 트랜잭션을 처리하는 동안 사용하는 CPU 사용량, 메모리 사용량, 네트워크 사용량

## 교착상태
* 둘 이상의 프로세스들이 서로 점유하고 있는 자원을 요구하며 무한정 대기하고 있는 상태

## 교착 상태 필요 충분 조건
* 상호 배제 : 한번에 한개의 프로세스만이 공유 자원을 사용
* 점유 및 대기 : 최소한 하나의 자원을 점유하면서 다른 프로세스에 할당된 자원을 추가로 점유하기 위해 대기하는 프로세스 존재
* 비선점 : 다른 프로세스에 할당된 자원은 끝날때까지 강제로 선점 불가
* 환형 대기 : 프로세스들이 원형으로 구성되어 있어 앞뒤 프로세스 자원을 요구

## 교착 상태 해결 방법
* 예방
* 회피 : 은행원 알고리즘
* 발견
* 회복

---------------------------------------------------------------------------------------------------------------------------------------------------

## 페이징 기법의 문제
* 스래싱 : 프로세스 처리 시간보다 페이지 교체 시간이 더 많아지는 상태

## 페이징 기법의 해결방안
* 워킹 셋 : 일정 시간동안 자주 참조하는 페이지들을 주기억장치에 상주시켜 페이지 부재 및 교체 현상을 최소화

---------------------------------------------------------------------------------------------------------------------------------------------------

## 선점형 스케줄링
* SRT(Shortest Remaining Time First) : 가장 짧은 시간이 소요되는 프로세스를 먼저 수행
* 다단계 큐
* 다단계 피드백 큐 : 서로 다른 CPU 시간 할당량 부여
* 라운드 로빈

## 비선점형 스케줄링 (우기HFS)
* 우선순위
* 기한부
* HRN : 대기중인 프로세스 중 현재 응답률이 가장 높은것을 선택. SJF의 약점인 __기아현상__ 보완. (대기시간 + 서비스시간) / 서비스시간
* FCFS(First Come First Service) : FIFO
* SJF(Shortest Job First)

---------------------------------------------------------------------------------------------------------------------------------------------------

## 가상화 기술요소
* 컴퓨팅 가상화 : 물리적으로 컴퓨터 리소스를 가상화해 논리적 단위로 리소스를 활용할 수 있도록 하는 기술
* 스토리지 가상화 : 스토리지와 서버 사이에 소프트웨어/하드웨어 계층을 추가, 스토리지를 논리적으로 제어 및 활용할 수 있도록 하는 기술
* I/O 가상화 : 서버와 I/O 디바이스 사이에 위치하는 미들웨어 계층으로, 서버의 I/O 자원을 물리적으로 분리하고 케이블과 스위치 구성을 단순화해 효율적인 연결 지원
* 컨테이너 : 컨테이너화된 애플리케이션들이 단일 운영체제상에서 실행되도록 해주는 기술
* 분산처리 기술 : 여러 대의 컴퓨터 계산 및 저장능력을 이용해 커다란 계산문제나 대용량의 데이터를 처리하고 저장하는 기술
* 네트워크 가상화 기술 : 물리적으로 떨어져 있는 다양한 장비들을 연결하기 위한 수단

---------------------------------------------------------------------------------------------------------------------------------------------------

# OSI 7계층 (물데네전세표응)

|계층이름       | 설명                                                                              |전송단위           | 프로토콜/장비                                      |
|--------------|-----------------------------------------------------------------------------------|----------------------------------------------------------------------|
|응용계층       |사용자와 네트워크 간 응용서비스 연결, 데이터 생성                                     | 데이터            | 프로토콜 : HTTP, FTP, SMTP, Telnet, POP3/IMAP      |
|표현계층       |데이터 형식 설정, 부호교환, 암·복호화, 압축                                          | 데이터            | 프로토콜 : JPEG, MPEG                               |
|세션계층       |송수신간의 논리적인 연결, 연결 접속, 동기제어                                         | 데이터            | 프로토콜 : PRC, NetBIOS                            |
|전송계층       |송수신 프로세스 간의 연결, 데이터 분할, 재조립, 흐름 제어, 오류 제어, 혼잡 제어         | 세그먼트(Segment) | 프로토콜 : TCP, UDP                                 |
|네트워크 계층  |단말기 간 데이터 전송을 위한 최적화된 경로 제공                                       | 패킷               | 장비 : 라우터, 게이트웨이, 스위치, 백본 스위칭 허브   |
|데이터링크 계층|인접 시스템 간 데이터 전송, 전송 오류 제어, 동기화, 오류 제어, 흐름 제어, 회선 제어      | 프레임(Frame)      | 장비 : 브리지, 스위치                               |
|물리계층       |0과 1의 비트 정보를 회선에 보내기 위한 전기적 신호로 변환                              | 비트(Bit)          | 장비 : 허브, 리피터                                |

---------------------------------------------------------------------------------------------------------------------------------------------------

## 네트워크 계층 프로토콜
* IP, ARP, RARP, ICMP, IGMP, 라우팅 프로토콜

## 라우팅 프로토콜의 구성
* 내부라우팅 프로토콜(IGP)
    * RIP(Routing Information Protocol) : AS 내에서 사용하는 거리 벡터 알고리즘에 기초해 개발된 내부 라우팅 프로토콜, 벨만-포드 알고리즘, 15홉 제한, IGRP
    * OSPF(Open Shortest Path First) : 규모가 크고 복잡한 TCP/IP네트워크에서 RIP의 단점 개선위한 링크 상태 알고리즘 적용해 최단 경로를 찾는 프로토콜, 다익스트라 알고리즘, 홉 제한 없음, ELGRP
* 외부 라우팅 프로토콜(EGP)
    * BGP : AS 상호 간에 경로 정보를 교환하기 위한 라우팅 프로토콜　

## 라우팅 알고리즘의 유형
* 거리 벡터(Distance Vector) 알고리즘 : 인접 라우터와 정보를 공유해 목적지까지의 거리와 방향을 결정하는 알고리즘, 벨만-포드 알고리즘 사용
* 링크 상태 알고리즘 : 링크 상태 정보를 모든 라우터에게 전달해 최단 경로 트리 구성, 다익스트라(Dijkstra) 알고리즘 사용

---------------------------------------------------------------------------------------------------------------------------------------------------

## 프로토콜
* 서로 다른 시스템이나 기기들 간의 데이터 교환을 원활히 하기 위한 표준화된 통신규약
* '기술적 은어'를 뜻함
 
## 프로토콜의 3요소
* 구문
* 의미
* 타이밍


---------------------------------------------------------------------------------------------------------------------------------------------------
## IPv4 전송방식 : 유니, 멀티, 브로드
* IPv4 : 32bit

 

## IPv6 전송방식 : 유니, 멀티, 애니
* IPv6 : 128bit, 주소 확장, 이동성, 인증 및 보안 개선

 
## 전송방식
* 유니캐스트 : 1 대 1
* 애니캐스트 : 가장 가까운 노드로 1 대 1
* 멀티캐스트 : 1 대 다
* 브로드캐스트 : 다 대 다

---------------------------------------------------------------------------------------------------------------------------------------------------

## 정렬
* 선택정렬 
    : __최소값__ 을 찾아 첫번째 숫자와 위치 교환, 이후 정렬된 값을 제외한 최소 숫자를 정렬되지 않은 숫자 중 첫번재 숫자와 다시 위치 교환, 이를 반복
    1. 9 6 7 3 5
    2. 3 6 7 9 5
    3. 3 5 7 9 6
    4. 3 5 6 9 7
    5. 3 5 6 7 9

<br>

* 삽입정렬
    : __두번째 숫자__ 와 첫번째 숫자 비교하여 크기 순으로 정렬, 이후 __3번째 숫자__ 를 앞서 정렬된 숫자들 사이에 크기 순에 맞게 재정렬, 이를 반복
    1. 9 6 7 3 5
    2. 6 9 7 3 5
    3. 6 7 9 3 5
    4. 3 6 7 9 5
    5. 3 5 6 7 9
    
<br>
    
* 버블정렬
    : 왼쪽부터 __인접한 두 숫자__ 간 크기 비교하여 위치 교환, 
    1. 9 6 7 3 5
        1. 6 9 7 3 5
        2. 6 7 9 3 5
        3. 6 7 3 9 5
        4. 6 7 3 5 9
    2. 6 3 7 5 9
        1. 6 3 5 7 9
    3. 3 6 5 7 9
        1. 3 5 6 7 9


---------------------------------------------------------------------------------------------------------------------------------------------------

## 추가
* 가상회선 vs 데이터그램
* L2TP vs PPTP vs L2F
* SSH "포트번호 22번"
* 바이러스 : 다른 네트워크의 컴퓨터로 스스로 전파되지는 않음
* 웜 : 자신을 복제하여 네트워크 연결을 통해서 다른 컴퓨터로 스스로 전파되고 확산
* ICMP : IP의 동작 과정에서 전송 오류가 발생하는 경우에 오류 정보를 전송하는 목적으로 사용하는 프로토콜
* 카디널리티
* 릴레이션 인스턴스 -> 릴레이션 외연

